#!/usr/bin/env python
import sys
import os
import logging
import logging.handlers
from twisted.internet import reactor
from neopets import Manager, load_config


class ConsoleFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
        return super(ConsoleFormatter, self).formatTime(record, '%H:%M:%S')


def _finished(_):
    reactor.stop()


def _configure_logging(config):
    console_formatter = ConsoleFormatter('%(asctime)s - %(name)s: %(message)s')
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(config.logging.console_level)

    file_formatter = logging.Formatter(
        '%(asctime)s [%(levelname)s] - %(name)s: %(message)s')
    file_handler = logging.handlers.WatchedFileHandler(
        os.path.join(config.misc.data_dir, 'neopets.log'))
    file_handler.setFormatter(file_formatter)
    file_handler.setLevel(config.logging.file_level)

    root_logger = logging.getLogger()
    for handler in (console_handler, file_handler):
        root_logger.addHandler(handler)

    root_logger.setLevel(min(config.logging.console_level, config.logging.file_level))

def _start(config):
    manager = Manager(config)
    d = manager.run()
    d.addCallback(_finished)

def main():
    try:
        _, config_filename = sys.argv
    except ValueError:
        print "Usage: neopets [config_file]"
        return 1

    config = load_config(config_filename)

    _configure_logging(config)

    reactor.callLater(0, _start, config)

    reactor.run()

    return 0


if __name__ == '__main__':
    exit(main())
